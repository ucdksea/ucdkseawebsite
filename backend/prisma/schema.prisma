// backend/prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String   @id @default(cuid()) // ← String PK
  email        String   @unique
  name         String
  passwordHash String
  isApproved   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  quotes       Quote[]
}

model Quote {
  id        String   @id @default(cuid())
  content   String
  title     String? // ← optional
  amount    Int? // ← optional
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum PostType {
  POPUP
  EVENT_POLAROID
  GM
  EVENT_UPCOMING
  OFFICER
}

model Post {
  id       String    @id @default(cuid())
  type     PostType
  active   Boolean   @default(true)
  imageUrl String
  title    String?
  date     DateTime?
  descKo   String?
  year     String?
  quarter  String?
  descEn   String?
  linkUrl  String?
  enName   String?
  koName   String?
  role     String?
  linkedin String?
  meta      Json?
  sortOrder  Int      @default(0)

  createdAt DateTime @default(now())

  @@index([type, active, sortOrder], name: "Post_type_sortOrder_idx")
}

model AuditEvent {
  id           String   @id @default(cuid())
  ts           DateTime @default(now())
  actorId      String?
  actorIp      String?
  action       AuditAction
  targetType   String
  targetId     String?
  title        String?
  summary      String?
  changesJson  Json?
  requestId    String?
  severity     Int      @default(0)
  // tamper-evident
  hash         String
  prevHash     String?
  // 조회 최적화
  yyyymm       String   @db.VarChar(6)

  @@index([ts])
  @@index([action, ts])
  @@index([yyyymm, ts])
}

enum AuditAction {
  LOGIN
  LOGOUT
  SIGNUP_REQUEST
  CREATE
  UPDATE
  DELETE
  ROLE_ASSIGN
  ROLE_REVOKE
  APPROVE
  REJECT
}

